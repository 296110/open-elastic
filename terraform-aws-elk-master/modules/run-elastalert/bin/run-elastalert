#!/usr/bin/env bash

set -e

readonly SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DEFAULT_ELASTALERT_CONFIG_FILE_PATH="/etc/elastalert/config.yml"
readonly DEFAULT_ELASTALERT_RULES_FOLDER="/etc/elastalert/elastalert-rules"


# Import the appropriate bash commons libraries
readonly BASH_COMMONS_DIR="/opt/gruntwork/bash-commons"

if [[ ! -d "$BASH_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that bash-commons is installed in $BASH_COMMONS_DIR. See https://github.com/gruntwork-io/bash-commons for more info."
  exit 1
fi

source "$BASH_COMMONS_DIR/assert.sh"
source "$BASH_COMMONS_DIR/log.sh"
source "$BASH_COMMONS_DIR/os.sh"
source "$BASH_COMMONS_DIR/file.sh"

function print_usage {
  echo
  echo "Usage: run-elastalert [OPTIONS]"
  echo
  echo "This script can be used to configure and run ElastAlert."
  echo
  echo "Optional arguments:"
  echo
  echo -e "  --config-file\tLocation of the config.yml file for ElastAlert. Default: $DEFAULT_ELASTALERT_CONFIG_FILE_PATH."
  echo -e "  --rules-folder\tLocation of folder containing all the *.yml alert rules for ElastAlert. Default: $DEFAULT_ELASTALERT_RULES_FOLDER."
  echo -e "  --auto-fill KEY=VALUE\t\t\tSearch the ElastAlert config file for KEY and replace it with VALUE. May be repeated."
  echo -e "  --auto-fill-rule KEY=VALUE\t\t\tSearch each file in the ElastAlert rules folder (specified by --rules-folder) for KEY and replace it with VALUE. May be repeated."
  echo
  echo "Example:"
  echo
  echo "  install.sh \\"
  echo "    --auto-fill \"<__ES_HOST__>=elasticsearch.example.com\" \\"
  echo
}

function auto_fill_config {
  local -r config="$1"
  shift 1
  local -r auto_fill=("$@")

  if [[ -z "${auto_fill[@]}" ]]; then
    log_info "No auto-fill params specified."
    return
  fi

  local param
  for param in "${auto_fill[@]}"; do
    auto_fill_param "$config" "$param"
  done
}

function auto_fill_param {
  local -r config="$1"
  local -r param="$2"

  # The param is of the format KEY=VALUE.
  local -r placeholder_name="$(string_strip_suffix "$param" "=*")"
  local -r placeholder_value="$(string_strip_prefix "$param" "*=")"

  log_info "Replacing the '$placeholder_name' placeholder in $config with $placeholder_value"
  file_replace_text "$placeholder_name" "$placeholder_value" "$config"
}

function start_elastalert {
  log_info "Starting ElastAlert"

  sudo systemctl enable elastalert
  sudo systemctl start elastalert
}

function process_config_file_template {
  local -r config_file_template="$1"
  shift 1
  local -ar auto_fill=($@)

  log_info "Processing config file from template: $config_file_template"

  auto_fill_config "$config_file_template" "${auto_fill[@]}"
}

function run {
  local auto_fill=()
  local auto_fill_rule=()
  local config_file="$DEFAULT_ELASTALERT_CONFIG_FILE_PATH"
  local rules_folder="$DEFAULT_ELASTALERT_RULES_FOLDER"


  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --auto-fill)
        assert_not_empty "$key" "$2"
        auto_fill+=("$2")
        shift
        ;;
      --auto-fill-rule)
        assert_not_empty "$key" "$2"
        auto_fill_rule+=("$2")
        shift
        ;;
      --rules-folder)
        assert_not_empty "$key" "$2"
        rules_folder="$2"
        shift
        ;;
      --config-file)
        assert_not_empty "$key" "$2"
        config_file="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        echo "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  # Iterate over every YML rule file in the rules folder and apply
  # auto-fill-rules to each file.
  for rule_file in $rules_folder/*.yml; do
    process_config_file_template "$rule_file" "${auto_fill_rule[@]}"
  done

  process_config_file_template "$config_file" "${auto_fill[@]}"

  start_elastalert
}

run "$@"